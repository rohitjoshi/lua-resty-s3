http {
    
    lua_package_path "${prefix}/lib/?.lua;;";
    
    server {
    
        location /test {
            content_by_lua '
                local s3 = require "resty.s3"
                local s3, err = s3:new("aws-id", "aws-key")
                
                final_url, err = s3:upload_url("http://lorempixel.com/400/200/", "examplebucket", "lorempixel400x200")`
            ';
        }
        
        location ~* ^/presigned_uri/(.*) {
             set $s3_path           '$1';
            set $s3_id             'xxx'; #add here your aws id and secret key
            set $s3_key            'xxx';
             #set_unescape_uri $name $arg_name;
             rewrite_by_lua '
              if not ngx.var.arg_expires then
                ngx.say("query param expire_sec is mandatory") 
                ngx.exit(ngx.OK) 
              end
              
              ngx.log(ngx.DEBUG, "s3_date " ..  ngx.var.s3_date)
              local s3 = require "resty.s3"
              ngx.log(ngx.DEBUG, "ngx.var.s3_url" .. ngx.var.s3_url)
              local s3, err = s3:new(ngx.var.s3_id, ngx.var.s3_key)
              if err then ngx.say(err) ngx.exit(ngx.OK) end
              local s3_url, err = s3:generate_presigned_url(ngx.var.request_method, ngx.var.s3_path, ngx.var.arg_expires)
              if err then 
                ngx.say(err) 
                ngx.exit(ngx.OK)
              end
              ngx.log(ngx.DEBUG, "s3_url: " ..  s3_url)           
              ngx.header.content_type = "text/plain";
              ngx.say(s3_url)
              ngx.exit(ngx.OK)
            ';

         }

         location ~* ^/s3/(.*) {
            set $messageid "";
            set $s3_bucket        'mybucket';
            set $s3_url           '/$s3_bucket/$1';
            set $s3_date           '';
            set $s3_auth           '';
            set $s3_id             'xxx'; #add here your aws id and secret key
            set $s3_key             'xxx';
           

             rewrite_by_lua '
                ngx.log(ngx.DEBUG, "s3:In rewrite_by_lua")
                local s3 = require "resty.s3"
                ngx.log(ngx.DEBUG, "ngx.var.s3_url" .. ngx.var.s3_url)
                local s3, err = s3:new(ngx.var.s3_id, ngx.var.s3_key)

                local headers, err = s3:generate_auth_headers(ngx.var.content_type, ngx.var.s3_url, ngx.var.request_method)
                ngx.var.s3_date = headers.date
                ngx.var.s3_auth = headers.auth
                

                ngx.log(ngx.DEBUG, "s3_date " ..  ngx.var.s3_date)
                ngx.log(ngx.DEBUG, "s3_auth " ..  ngx.var.s3_auth)
              
                local method = ngx.var.request_method
                if method then
                  if method == "PUT" or method == "POST" then
                    ngx.req.set_header("Content-Type", ngx.var.content_type)
                  end
                end
            ';

            proxy_set_header       Host 's3.amazonaws.com';
            proxy_set_header       Date  $s3_date;
            proxy_set_header       Authorization $s3_auth;
            
            proxy_hide_header      x-amz-id-2;
            proxy_hide_header      x-amz-request-id;
            proxy_hide_header      Set-Cookie;
            proxy_ignore_headers   "Set-Cookie";
            proxy_intercept_errors on;
            proxy_http_version     1.1;
            proxy_set_header       Connection "";
            proxy_set_header Accept-Language '';
            proxy_set_header Accept-Encoding '';
            proxy_set_header Accept '*/*';
            proxy_pass             https://s3/$s3_bucket/$1;
        }

    
        include *.urls;
        
    }
}
